@App:name("IS_ANALYTICS_GEOVELOCITY")
@App:description("Description of the plan")

-- Input stream with the Geovelocity data of usernaem,login ip and login time.
@sink(type = 'log', @map(type = 'text'))
@Source(type = 'http-request', source.id='testsource', receiver.url="https://localhost:8280/IS_ANALYTICS_GEOVELOCITY/InputStream", 
basic.auth.enabled='true', parameters="'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'", 
@map(type='json', @attributes(messageId='trp:messageId', username='$.event.username', loginTime='$.event.loginTime', loginIp = '$.event.loginIp')))
define stream InputStream (
    messageId string,
    username string,
    loginIp string,
    loginTime long);

-- Output stream with risk value of the current login attempt.
@sink(type = 'log', @map(type = 'text'))
@sink(type='http-response', source.id='testsource', message.id='{{messageId}}', @map(type='json'))
define stream OutputStream (
    messageId string,
    username string,
    risk double);

-- GEOVELOCITY_INFO database table to store updated login data of a user.
@primaryKey('username')
@store(type='rdbms', datasource='IS_ANALYTICS_DB')
define table GEOVELOCITY_INFO(
    username string,
    loginTime long,
    loginIp string,
    latitude double,
    longitude double,
    city string,
    country string,
    authenticationSuccess bool);

-- OverallAuthTableTable for all the authentication data.
@store(type='rdbms', datasource='IS_ANALYTICS_DB', 'field.length=serviceProvider:100, identityProvider:100, userStoreDomain:50, region:45')
@primaryKey('meta_tenantId', 'eventId', 'eventType')
define table OverallAuthTable (
    meta_tenantId int,
    contextId string,
    eventId string,
    eventType string,
    username string,
    localUsername string,
    userStoreDomain string,
    tenantDomain string,
    remoteIp string,
    region string,
    inboundAuthType string,
    serviceProvider string,
    rememberMeEnabled bool,
    forceAuthEnabled bool,
    passiveAuthEnabled bool,
    rolesCommaSeparated string,
    authenticationStep string,
    identityProvider string,
    authenticationSuccess bool,
    authStepSuccess bool,
    stepAuthenticator string,
    isFirstLogin bool,
    identityProviderType string,
    utcTime string,
    timestamp long
);

-- TravelRestrictedAreas database table to store restricted location combinations.
@primaryKey('Id')
@index('Id')
@store(type='rdbms', datasource='IS_ANALYTICS_DB', 'field.length=username:20, loginTime:20, loginIp:20, city:20')
define table TRAVELRESTRICTEDAREAS(
    Id int,
    currentLocation string,
    lastLocation string);

-- Function to calculate time gap between last login and current login attempt.
define function timeGapFn[javascript] return int{
    var timeGap = Math.floor(parseInt(data[0])-parseInt(data[1]));
    return timeGap
};

-- Stream with input stream data.
from  InputStream
select messageId,
    username,
    loginTime,
    loginIp
insert into LoginDetailsStream;

-- Stream to get all the login data by the IP address.
from  LoginDetailsStream#log('LoginDetailsStream')#geo:geocoordinate(loginIp)
select messageId,
    username,
    loginTime,
    loginIp,
    latitude,
    longitude,
    geo:findCityFromIP(loginIp) as city,
    geo:findCountryFromIP(loginIp) as country
insert into FinalLoginDetailsStream;

from FinalLoginDetailsStream#log('**FinalLoginDetailsStream')
select * 
insert into tmpStream1;

-- Update GEO_VELOCITY_INFO database table with the last successful login details.
from FinalLoginDetailsStream#window.length(1) join OverallAuthTable
on FinalLoginDetailsStream.username == OverallAuthTable.username and OverallAuthTable.authenticationSuccess == true
select FinalLoginDetailsStream.username as username,
    max(OverallAuthTable.timestamp) as loginTime,
    true as authenticationSuccess
update GEOVELOCITY_INFO
    set GEOVELOCITY_INFO.loginTime=loginTime,GEOVELOCITY_INFO.authenticationSuccess=authenticationSuccess
    on GEOVELOCITY_INFO.username == username;

-- Get login details of last successful login and the current login attempt.
from FinalLoginDetailsStream#log('FinalLoginDetailsStream1')#window.length(1) join GEOVELOCITY_INFO
on  FinalLoginDetailsStream.username==GEOVELOCITY_INFO.username and GEOVELOCITY_INFO.authenticationSuccess == true
select FinalLoginDetailsStream.messageId as messageId,
    FinalLoginDetailsStream.username as username,
    FinalLoginDetailsStream.loginTime as currentLoginTime,
    GEOVELOCITY_INFO.loginTime as lastLoginTime,
    GEOVELOCITY_INFO.city as lastLoginCity,
    FinalLoginDetailsStream.city as currentLoginCity,
    GEOVELOCITY_INFO.country as lastLoginCountry,
    FinalLoginDetailsStream.country as currentLoginCountry,
    geo:distance(FinalLoginDetailsStream.latitude, FinalLoginDetailsStream.longitude, GEOVELOCITY_INFO.latitude,GEOVELOCITY_INFO.longitude) as distance,
    timeGapFn(FinalLoginDetailsStream.loginTime, GEOVELOCITY_INFO.loginTime) as timeGap
insert into GeoVelocityStream;

from GeoVelocityStream#log('***GeoVelocityStream')
select *
insert into tmpStream3;

-- Login Details for Initial login.
from FinalLoginDetailsStream#log('FinalLoginDetailsStream2')#window.length(1)[GEOVELOCITY_INFO.username==username in GEOVELOCITY_INFO]
select messageId,
    username,
    loginTime as currentLoginTime,
    loginTime as lastLoginTime,
    city as lastLoginCity,
    city as currentLoginCity,
    country as lastLoginCountry,
    country as currentLoginCountry,
    0.0 as distance,
    1 as timeGap
insert into GeoVelocityStream;

-- Get risk values of logins.
from GeoVelocityStream#log('GeoVelocityStream')
select messageId,
    username,
    timeGap,
    geovelocity:loginBehaviourBasedRisk(username, currentLoginCity, currentLoginTime) as loginBehaviourBasedRisk,
    geovelocity:restrictedAreaBasedRisk(currentLoginCity, lastLoginCity, currentLoginCountry, lastLoginCountry) as forbiddenAreaBasedLoginRisk,
    ifThenElse(distance==0,0.0,(distance/timeGap))  as velocity
insert into RiskValueStream;

from RiskValueStream#log('**RiskValueStream')
select * 
insert into tmpStream2;


-- Get the risk value based on geo-velocity, loginBehaviourBasedRisk, forbiddenAreaBasedLoginRisk.
from RiskValueStream#log('RiskValueStream')#window.length(1) 
select messageId,
    username,
    ifThenElse(velocity==0,0.0,ifThenElse(velocity>0.025, 1.0 , ifThenElse(forbiddenAreaBasedLoginRisk==1,0.5,ifThenElse(loginBehaviourBasedRisk>0.4, 0.3, 0.0)))) as risk
insert into OutputStream;

-- update GEOVELOCITY_INFO database.
from FinalLoginDetailsStream
select
    username,
    loginTime,
    loginIp,
    latitude,
    longitude,
    city,
    country,
    false as authenticationSuccess
update or insert into GEOVELOCITY_INFO
set GEOVELOCITY_INFO.username = username,
    GEOVELOCITY_INFO.loginTime = loginTime,
    GEOVELOCITY_INFO.loginIp=loginIp,
    GEOVELOCITY_INFO.latitude=latitude,
    GEOVELOCITY_INFO.longitude=longitude,
     GEOVELOCITY_INFO.city=city,
    GEOVELOCITY_INFO.country=country,
    GEOVELOCITY_INFO.authenticationSuccess=authenticationSuccess
on GEOVELOCITY_INFO.username == username;
